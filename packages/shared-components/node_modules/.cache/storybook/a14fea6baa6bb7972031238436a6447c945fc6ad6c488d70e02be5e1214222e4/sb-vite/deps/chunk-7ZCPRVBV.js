import {
  __export
} from "./chunk-PGHMIYUG.js";
import {
  require_global
} from "./chunk-DXIOBCSA.js";
import {
  require_client
} from "./chunk-NSL6OT67.js";
import {
  require_react
} from "./chunk-Q22L43U3.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// ../../.yarn/__virtual__/@storybook-react-virtual-060a5c2d80/0/cache/@storybook-react-npm-8.2.7-6438da3a8f-498bd8164b.zip/node_modules/@storybook/react/dist/chunk-SXKPGB5T.mjs
var import_react2 = __toESM(require_react(), 1);
var import_global = __toESM(require_global(), 1);

// ../../.yarn/__virtual__/@storybook-react-dom-shim-virtual-7f5bb76618/0/cache/@storybook-react-dom-shim-npm-8.2.7-e3685949dd-16343be9f4.zip/node_modules/@storybook/react-dom-shim/dist/react-18.mjs
var import_react = __toESM(require_react(), 1);
var import_client = __toESM(require_client(), 1);
var nodes = /* @__PURE__ */ new Map();
var WithCallback = ({ callback, children }) => {
  let once = (0, import_react.useRef)();
  return (0, import_react.useLayoutEffect)(() => {
    once.current !== callback && (once.current = callback, callback());
  }, [callback]), children;
};
var renderElement = async (node, el, rootOptions) => {
  let root = await getReactRoot(el, rootOptions);
  return new Promise((resolve) => {
    root.render(import_react.default.createElement(WithCallback, { callback: () => resolve(null) }, node));
  });
};
var unmountElement = (el, shouldUseNewRootApi) => {
  let root = nodes.get(el);
  root && (root.unmount(), nodes.delete(el));
};
var getReactRoot = async (el, rootOptions) => {
  let root = nodes.get(el);
  return root || (root = import_client.default.createRoot(el, rootOptions), nodes.set(el, root)), root;
};

// ../../.yarn/__virtual__/@storybook-react-virtual-060a5c2d80/0/cache/@storybook-react-npm-8.2.7-6438da3a8f-498bd8164b.zip/node_modules/@storybook/react/dist/chunk-SXKPGB5T.mjs
var entry_preview_exports = {};
__export(entry_preview_exports, { mount: () => mount, parameters: () => parameters, render: () => render, renderToCanvas: () => renderToCanvas });
var render = (args, context) => {
  let { id, component: Component2 } = context;
  if (!Component2) throw new Error(`Unable to render story ${id} as the component annotation is missing from the default export`);
  return import_react2.default.createElement(Component2, { ...args });
};
var { FRAMEWORK_OPTIONS } = import_global.global;
var ErrorBoundary = class extends import_react2.Component {
  constructor() {
    super(...arguments);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidMount() {
    let { hasError } = this.state, { showMain } = this.props;
    hasError || showMain();
  }
  componentDidCatch(err) {
    let { showException } = this.props;
    showException(err);
  }
  render() {
    let { hasError } = this.state, { children } = this.props;
    return hasError ? null : children;
  }
};
var Wrapper = (FRAMEWORK_OPTIONS == null ? void 0 : FRAMEWORK_OPTIONS.strictMode) ? import_react2.StrictMode : import_react2.Fragment;
async function renderToCanvas({ storyContext, unboundStoryFn, showMain, showException, forceRemount }, canvasElement) {
  var _a, _b;
  let content = import_react2.default.createElement(ErrorBoundary, { showMain, showException }, import_react2.default.createElement(unboundStoryFn, { ...storyContext })), element = Wrapper ? import_react2.default.createElement(Wrapper, null, content) : content;
  return forceRemount && unmountElement(canvasElement), await renderElement(element, canvasElement, (_b = (_a = storyContext == null ? void 0 : storyContext.parameters) == null ? void 0 : _a.react) == null ? void 0 : _b.rootOptions), () => unmountElement(canvasElement);
}
var mount = (context) => async (ui) => (ui != null && (context.originalStoryFn = () => ui), await context.renderToCanvas(), context.canvas);
var parameters = { renderer: "react" };

export {
  entry_preview_exports,
  render,
  renderToCanvas,
  mount,
  parameters
};
//# sourceMappingURL=chunk-7ZCPRVBV.js.map
